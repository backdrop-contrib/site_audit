<?php

require_once 'site_audit.autoload.inc';
require_once 'Report/Abstract.php';
require_once 'Check/Abstract.php';

/**
 * Implements hook_menu().
 *
 * @return array
 */
function site_audit_menu() {
  $items['admin/reports/site-audit'] = [
    'title' => 'Site Audit',
    'description' => 'View the site audit report for this site.',
    'page callback' => 'site_audit_report',
    'access arguments' => ['administer site configuration'],
    'type' => MENU_NORMAL_ITEM,
  ];
  $items['admin/reports/site-audit/view'] = [
    'title' => 'Report',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  ];
  $items['admin/reports/site-audit/configuration'] = [
    'title' => 'Settings',
    'page callback' => 'backdrop_get_form',
    'page arguments' => ['site_audit_settings_form'],
    'access arguments' => ['administer site configuration'],
    'type' => MENU_LOCAL_TASK,
  ];
  return $items;
}

/**
 * Implements hook_config_info().
 */
function site_audit_config_info() {
  $prefixes['site_audit.settings'] = array(
    'label' => t('Site Audit settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Renders Site Audit Settings form.
 * @param $form
 * @param $form_state
 * @return array
 */
function site_audit_settings_form($form, &$form_state) {
  // Retrieve the current reports configuration.
  $reports_config = config_get('site_audit.settings', 'site_audit_reports') ?: [];

  // Dynamically use the configuration keys as options.
  $options = array_keys($reports_config); // Use keys for options and labels.

  // Sort the options alphabetically by label.
  $options = array_combine($options, $options);
  asort($options);

  // Ensure the default values align with the options.
  $default_values = [];
  foreach (array_keys($options) as $option) {
    $default_values[$option] = isset($reports_config[$option]) && $reports_config[$option] ? $option : 0;
  }

  $form['site_audit_reports'] = [
    '#type' => 'checkboxes',
    '#title' => t('Available Reports'),
    '#description' => t('Enable or disable the reports.'),
    '#options' => $options, // Options are now sorted alphabetically.
    '#default_value' => array_filter($default_values), // Use only enabled reports as default.
  ];

  // Add a submit button within the 'actions' array.
  $form['actions'] = [
    '#type' => 'actions',
    'submit' => [
      '#type' => 'submit',
      '#value' => t('Save configuration'),
    ],
  ];

  // Add the submit handler.
  $form['#submit'][] = 'site_audit_settings_form_submit';

  return $form;
}

function site_audit_settings_form_submit($form, &$form_state) {
  $values = $form_state['values']['site_audit_reports'];

  // Convert the checkbox values back into the configuration format.
  $updated_reports = [];
  foreach ($values as $key => $value) {
    $updated_reports[$key] = $value ? 1 : 0; // 1 = enabled, 0 = disabled.
  }

  // Save the updated reports configuration.
  config_set('site_audit.settings', 'site_audit_reports', $updated_reports);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function site_audit_get_web_reports() {
  // Get the absolute path to the 'Report' directory within this module.
  $module_path = backdrop_get_path('module', 'site_audit') . '/Report';
  $reports = file_scan_directory($module_path, '/\.php$/');
  $supported_reports = [];
  $invalid_reports = [
    'Abstract',
  ];

  foreach ($reports as $file => $report_info) {
    // Extract the class name from the file name.
    $class_name = pathinfo($report_info->filename, PATHINFO_FILENAME);

    // Skip invalid reports.
    if (!in_array($class_name, $invalid_reports)) {
      $supported_reports[$class_name] = $class_name;
    }
  }

  return $supported_reports;
}

/**
 * Menu callback for the report page UI.
 *
 * @return array
 */
function site_audit_report() {
  $output = [];

  // Add custom CSS for the h2 margin adjustment.
  backdrop_add_css(
    'h2 { scroll-margin-top: 5vh; }',
    [
      'type' => 'inline',
      'group' => CSS_THEME,
      'weight' => 100,
    ]
  );

  // Get the list of enabled reports.
  $reports = config_get('site_audit.settings', 'site_audit_reports');
  if (empty($reports)) {
    watchdog('site_audit', 'No reports are configured.', [], WATCHDOG_WARNING);
    return ['#markup' => t('No reports are enabled.')];
  }

  // Filter and sort enabled reports alphabetically.
  $enabled_reports = array_filter($reports, function($enabled) {
    return $enabled; // Include only enabled reports.
  });
  ksort($enabled_reports);

  // Summary and detailed results.
  $summary_items = [];
  $detailed_results = [];

  foreach ($enabled_reports as $report_class => $enabled) {
    $class_name = "SiteAuditReport" . ucfirst($report_class);

    if (!class_exists($class_name)) {
      watchdog('site_audit', 'Report class not found: @class', ['@class' => $class_name], WATCHDOG_ERROR);
      continue;
    }

    try {
      // Instantiate the report object.
      $report = new $class_name();
      $html = $report->toHtml();

      // Extract details from the HTML.
      if (preg_match('/<h2 id="([^"]+)">(.*?)<span.*?>(.*?)<\/span>/', $html, $matches)) {
        $id = $matches[1];
        $title = strip_tags($matches[2]);
        $score = strip_tags($matches[3]);
      }
      else {
        $id = strtolower($report_class);
        $title = ucfirst(str_replace('_', ' ', $report_class));
        $score = '0%';
      }

      // Construct the link.
      $url = url('admin/reports/site-audit') . '#' . $id;

      // Use raw HTML for the link to preserve the #.
      $summary_items[] = [
        'data' => '<a href="' . $url . '">' . t('@title (@score)', [
            '@title' => $title,
            '@score' => $score,
          ]) . '</a>',
      ];

      // Store the full HTML for detailed results.
      $detailed_results[$report_class] = $html;
    }
    catch (Exception $e) {
      watchdog('site_audit', 'Error instantiating report class @class: @message', [
        '@class' => $class_name,
        '@message' => $e->getMessage(),
      ], WATCHDOG_ERROR);
    }
  }
  // Build the summary section with inline links.
  $summary_links = implode(' ', array_map(function($item) {
    return $item['data'];
  }, $summary_items));

  $output['summary'] = [
    '#markup' => $summary_links,
  ];

  // Add the detailed results section.
  foreach ($detailed_results as $report_class => $result) {
    $output[$report_class] = [
      '#markup' => $result,
    ];
  }

  return $output;
}

  // We've tried to convert drush only reports to web based reports without altering the original report classes, by wrapping
// the drush functions used and mirroring the expect return values.

if (!function_exists('dt')) {
  function dt($text, $args = [], $options = []) {
    return t($text, $args, $options);
  }
}
//
//if (!function_exists('drush_get_option')) {
//  function drush_get_option($key, $default = NULL ) {
//    switch ($key) {
//      case 'html':
//      case 'detail':
//        return TRUE;
//      case 'json':
//      case 'skip':
//      case 'bootstrap':
//      case 'vendor':
//      case 'extension_count':
//      case 'impact':
//      case 'limit':
//      case 'min_rows':
//      default :
//        return FALSE;
//    }
//  }
//}
//
//if (!function_exists('drush_get_commands')) {
//  function drush_get_commands() {
//    $commands = [];
//    // TODO: Generate these by scanning the Check directory.
//    $commands['audit_best_practices']['checks'] = ['Multisite', 'Settings', 'SitesDefault', 'SitesAll', 'SitesSuperfluous', 'Fast404', 'PhpFilter'];
//    $commands['audit_block']['checks'] = ['Enabled', 'Cache', 'CacheReport'];
//    $commands['audit_cache']['checks'] = ['Anon', 'Lifetime', 'PageExpire', 'PageCompression', 'PreprocessCss', 'PreprocessJs', 'Lock', 'Backends', 'DefaultClass', 'Bins'];
//    $commands['audit_codebase']['checks'] = ['SizeFiles', 'SizeAll', 'ManagedFileCount', 'ManagedFileSize'];
//    $commands['audit_content']['checks'] = ['ContentTypes', 'ContentTypesUnused', 'DuplicateTitles', 'Vocabularies', 'VocabulariesUnused', 'FieldEnabled', 'FieldCount', 'FieldInstances', 'FieldsUnused'];
//    $commands['audit_cron']['checks'] = ['Enabled', 'Running', 'Last'];
//    $commands['audit_database']['checks'] = ['Size', 'RowCount', 'Collation', 'Engine'];
//    $commands['audit_extensions']['checks'] = ['Count', 'Dev', 'Unrecommended', 'Redundant', 'Duplicate', 'Missing', 'Disabled', 'Update', 'Security'];
//    $commands['audit_insights']['checks'] = ['Analyze'];
//    $commands['audit_security']['checks'] = ['MenuRouter'];
//    $commands['audit_status']['checks'] = ['System'];
//    $commands['audit_users']['checks'] = ['CountAll', 'CountBlocked', 'WhoIsNumberOne', 'BlockedNumberOne'];
//    $commands['audit_views']['checks'] = ['Enabled', 'Count', 'CacheResults', 'CacheOutput'];
//    $commands['audit_watchdog']['checks'] = ['Syslog', 'Enabled', 'Count', 'Age', '404', 'Php'];
//    return $commands;
//  }
//}
//
//if (!defined('DRUSH_COMMAND') && !function_exists('drush_get_extensions')) {
//  function drush_get_extensions($include_core = FALSE) {
//    $enabledModules = module_list();
//    $enabledThemes = list_themes();
//    $enabledExtensions = array_merge($enabledModules, $enabledThemes);
//    return $enabledExtensions;
//  }
//}
//
//if (!defined('DRUSH_COMMAND') && !function_exists('drush_get_extension_status')) {
//  function drush_get_extension_status($extension) {
//    return module_exists($extension) ? 'enabled' : 'disabled';
//  }
//}
//if (!defined('DRUSH_COMMAND') && !function_exists('drush_parse_command')) {
//  function drush_parse_command() {
//    return ['command' => 'audit_all'];
//  }
//}
//
//if (!defined('DRUSH_COMMAND') && !function_exists('drush_command_invoke_all_ref')) {
//  function drush_command_invoke_all_ref($hook, &$ref = NULL) {
//    return [];
//  }
//}
//
//if (!defined('DRUSH_COMMAND') && !function_exists('drush_set_error')) {
//  function drush_set_error($message, $type = NULL) {
//    backdrop_set_message($message);
//  }
//}
//
//if (!defined('DRUSH_COMMAND') && !function_exists('drush_get_context')) {
//  function drush_get_context($var) {
//    return __DIR__;
//  }
//}
//
//if (!defined('DRUSH_COMMAND') && !function_exists('drush_invoke_process')) {
//  function drush_invoke_process() {
//    return [];
//  }
//}
//
//if (!defined('DRUSH_COMMAND') && !function_exists('site_audit_env_is_dev')) {
//  function site_audit_env_is_dev() {
//    return FALSE;
//  }
//}
//
//if (!defined('DRUSH_COMMAND') && !function_exists('core_watchdog_query')) {
//  function core_watchdog_query() {
//    return FALSE;
//  }
//}
//
//if (!defined('DRUSH_COMMAND') && !function_exists('drush_db_select')) {
//  function drush_db_select() {
//    return FALSE;
//  }
//}
//
//if (!defined('DRUSH_COMMAND') && !function_exists('drush_db_fetch_object')) {
//  function drush_db_fetch_object() {
//    return FALSE;
//  }
//}
//
//if (!!defined('DRUSH_COMMAND') && !function_exists('_drush_sql_get_db_spec')) {
//  function _drush_sql_get_db_spec() {
//    return FALSE;
//  }
//}

/**
 * Determine if in a development environment.
 *
 * @todo This only ever worked on pantheon. Let's deprecate it.
 *
 * @deprecated
 * @return bool
 *   Whether site is in a development environment.
 */
function site_audit_env_is_dev() {
  return FALSE;
}


